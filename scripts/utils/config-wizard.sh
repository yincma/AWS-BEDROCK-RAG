#!/bin/bash

# AWS RAG System Configuration Wizard
# Version: 1.0
# Description: 交互式配置生成向导

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 脚本目录
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# 配置变量
ENVIRONMENT=""
PROJECT_NAME=""
AWS_REGION=""
OWNER=""
COST_CENTER=""
ALARM_EMAIL=""

# 打印带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# 打印标题
print_title() {
    local title=$1
    echo
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}  $title${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
}

# 显示欢迎界面
show_welcome() {
    clear
    cat << "EOF"
    ╔══════════════════════════════════════════════════════════════╗
    ║                                                              ║
    ║          AWS RAG System Configuration Wizard v1.0            ║
    ║                                                              ║
    ║            帮助您快速生成项目配置文件                          ║
    ║                                                              ║
    ╚══════════════════════════════════════════════════════════════╝
EOF
    echo
    print_message "$CYAN" "本向导将帮助您创建AWS RAG System的配置文件。"
    print_message "$CYAN" "请按照提示输入相关信息。"
    echo
    read -p "按Enter键开始..."
}

# 获取输入，支持默认值
get_input() {
    local prompt=$1
    local default=$2
    local value=""
    
    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " value
        value=${value:-$default}
    else
        while [ -z "$value" ]; do
            read -p "$prompt: " value
            if [ -z "$value" ]; then
                print_message "$RED" "此项为必填项，请输入有效值。"
            fi
        done
    fi
    
    echo "$value"
}

# 选择环境
select_environment() {
    print_title "选择环境"
    
    echo "请选择要配置的环境："
    echo
    echo "  ${CYAN}1)${NC} dev     - 开发环境"
    echo "  ${CYAN}2)${NC} staging - 预发布环境"
    echo "  ${CYAN}3)${NC} prod    - 生产环境"
    echo "  ${CYAN}4)${NC} custom  - 自定义环境"
    echo
    
    local choice
    while true; do
        read -p "请选择 (1-4): " choice
        case $choice in
            1) ENVIRONMENT="dev"; break ;;
            2) ENVIRONMENT="staging"; break ;;
            3) ENVIRONMENT="prod"; break ;;
            4) 
                ENVIRONMENT=$(get_input "请输入自定义环境名称")
                break 
                ;;
            *) print_message "$RED" "无效选择，请重新输入。" ;;
        esac
    done
    
    print_message "$GREEN" "✓ 已选择环境: $ENVIRONMENT"
}

# 配置基本信息
configure_basic_info() {
    print_title "基本信息配置"
    
    PROJECT_NAME=$(get_input "项目名称" "rag-system")
    AWS_REGION=$(get_input "AWS区域" "us-east-1")
    OWNER=$(get_input "项目负责人" "$USER")
    COST_CENTER=$(get_input "成本中心" "Engineering")
}

# 配置通知设置
configure_notifications() {
    print_title "通知设置"
    
    local enable_alarms
    read -p "是否启用CloudWatch告警? (y/n) [y]: " enable_alarms
    enable_alarms=${enable_alarms:-y}
    
    if [[ "$enable_alarms" =~ ^[Yy]$ ]]; then
        ALARM_EMAIL=$(get_input "告警邮箱地址" "")
    fi
}

# 高级配置
advanced_configuration() {
    print_title "高级配置"
    
    local configure_advanced
    read -p "是否进行高级配置? (y/n) [n]: " configure_advanced
    configure_advanced=${configure_advanced:-n}
    
    if [[ "$configure_advanced" =~ ^[Yy]$ ]]; then
        # Lambda配置
        echo
        print_message "$CYAN" "Lambda函数配置:"
        LAMBDA_MEMORY=$(get_input "  Lambda内存大小(MB)" "512")
        LAMBDA_TIMEOUT=$(get_input "  Lambda超时时间(秒)" "300")
        
        # API Gateway配置
        echo
        print_message "$CYAN" "API Gateway配置:"
        API_RATE_LIMIT=$(get_input "  API速率限制(请求/秒)" "1000")
        API_BURST_LIMIT=$(get_input "  API突发限制" "2000")
        
        # 监控配置
        echo
        print_message "$CYAN" "监控配置:"
        LOG_RETENTION=$(get_input "  日志保留天数" "7")
        LOG_LEVEL=$(get_input "  日志级别(DEBUG/INFO/WARN/ERROR)" "INFO")
    else
        # 使用默认值
        LAMBDA_MEMORY="512"
        LAMBDA_TIMEOUT="300"
        API_RATE_LIMIT="1000"
        API_BURST_LIMIT="2000"
        LOG_RETENTION="7"
        LOG_LEVEL="INFO"
    fi
}

# 生成配置文件
generate_config() {
    print_title "生成配置文件"
    
    local config_dir="$PROJECT_ROOT/environments/$ENVIRONMENT"
    local config_file="$config_dir/config.yaml"
    
    # 创建目录
    mkdir -p "$config_dir"
    
    # 生成配置内容
    cat > "$config_file" << EOF
# AWS RAG System Configuration
# Environment: $ENVIRONMENT
# Generated: $(date '+%Y-%m-%d %H:%M:%S')
# Generated by: Configuration Wizard

# 继承基础配置
extends: ../base.yaml

# 环境标识
environment: $ENVIRONMENT

# 项目信息覆盖
project:
  name: $PROJECT_NAME

# AWS配置覆盖
aws:
  region: $AWS_REGION

# 标签覆盖
tags:
  Owner: $OWNER
  CostCenter: $COST_CENTER
  CreatedBy: ConfigWizard
  CreatedDate: $(date '+%Y-%m-%d')

# Lambda配置覆盖
lambda:
  memory_size: $LAMBDA_MEMORY
  timeout: $LAMBDA_TIMEOUT
  environment_variables:
    LOG_LEVEL: $LOG_LEVEL

# API Gateway配置覆盖
api_gateway:
  throttle_rate_limit: $API_RATE_LIMIT
  throttle_burst_limit: $API_BURST_LIMIT

# 监控配置覆盖
monitoring:
  cloudwatch:
    retention_days: $LOG_RETENTION
EOF

    # 添加告警配置（如果提供了邮箱）
    if [ -n "$ALARM_EMAIL" ]; then
        cat >> "$config_file" << EOF
    alarm_enabled: true
    alarm_email: $ALARM_EMAIL
EOF
    fi

    # 根据环境添加特定配置
    case $ENVIRONMENT in
        dev)
            cat >> "$config_file" << EOF

# 开发环境特定配置
security:
  cors:
    allowed_origins:
      - "http://localhost:3000"
      - "http://localhost:8080"
      - "*"

development:
  enable_debug_endpoints: true
  enable_hot_reload: true
EOF
            ;;
        staging)
            cat >> "$config_file" << EOF

# 预发布环境特定配置
security:
  enable_waf: true
  cors:
    allowed_origins:
      - "https://staging.$PROJECT_NAME.com"

testing:
  enable_load_testing: true
  synthetic_monitoring:
    enabled: true
EOF
            ;;
        prod)
            cat >> "$config_file" << EOF

# 生产环境特定配置
security:
  enable_waf: true
  enable_shield: true
  cors:
    allowed_origins:
      - "https://$PROJECT_NAME.com"
      - "https://www.$PROJECT_NAME.com"

performance:
  enable_caching: true
  enable_compression: true

backup:
  enabled: true
  retention_days: 30

cost_optimization:
  enable_auto_scaling: true
  min_capacity: 2
  max_capacity: 50
EOF
            ;;
    esac
    
    print_message "$GREEN" "✓ 配置文件已生成: $config_file"
}

# 生成环境变量文件
generate_env_file() {
    local env_file="$PROJECT_ROOT/environments/$ENVIRONMENT/.env"
    
    cat > "$env_file" << EOF
# AWS RAG System Environment Variables
# Environment: $ENVIRONMENT
# Generated: $(date '+%Y-%m-%d %H:%M:%S')

# AWS配置
AWS_REGION=$AWS_REGION
AWS_PROFILE=default

# 项目配置
PROJECT_NAME=$PROJECT_NAME
ENVIRONMENT=$ENVIRONMENT

# 标签
OWNER=$OWNER
COST_CENTER=$COST_CENTER

# 日志配置
LOG_LEVEL=$LOG_LEVEL
LOG_RETENTION_DAYS=$LOG_RETENTION

# 告警配置
ALARM_EMAIL=$ALARM_EMAIL

# Lambda配置
LAMBDA_MEMORY_SIZE=$LAMBDA_MEMORY
LAMBDA_TIMEOUT=$LAMBDA_TIMEOUT

# API配置
API_RATE_LIMIT=$API_RATE_LIMIT
API_BURST_LIMIT=$API_BURST_LIMIT
EOF
    
    print_message "$GREEN" "✓ 环境变量文件已生成: $env_file"
}

# 验证生成的配置
validate_generated_config() {
    print_title "验证配置"
    
    print_message "$CYAN" "正在验证生成的配置文件..."
    
    if [ -x "$SCRIPT_DIR/validate-config.sh" ]; then
        if "$SCRIPT_DIR/validate-config.sh" "$ENVIRONMENT"; then
            print_message "$GREEN" "✓ 配置验证通过"
        else
            print_message "$YELLOW" "⚠ 配置验证有警告，请查看上面的详细信息"
        fi
    else
        print_message "$YELLOW" "⚠ 配置验证工具未找到，跳过验证"
    fi
}

# 显示总结
show_summary() {
    print_title "配置生成完成"
    
    echo "生成的文件："
    echo "  • 配置文件: environments/$ENVIRONMENT/config.yaml"
    echo "  • 环境变量: environments/$ENVIRONMENT/.env"
    echo
    echo "配置摘要："
    echo "  • 环境: $ENVIRONMENT"
    echo "  • 项目: $PROJECT_NAME"
    echo "  • 区域: $AWS_REGION"
    echo "  • 负责人: $OWNER"
    echo
    print_message "$CYAN" "下一步："
    echo "  1. 检查并调整生成的配置文件"
    echo "  2. 运行 'source environments/$ENVIRONMENT/.env' 加载环境变量"
    echo "  3. 运行 'deploy.sh --env $ENVIRONMENT' 开始部署"
}

# 主函数
main() {
    # 显示欢迎界面
    show_welcome
    
    # 选择环境
    select_environment
    
    # 配置基本信息
    configure_basic_info
    
    # 配置通知
    configure_notifications
    
    # 高级配置
    advanced_configuration
    
    # 生成配置文件
    generate_config
    
    # 生成环境变量文件
    generate_env_file
    
    # 验证配置
    validate_generated_config
    
    # 显示总结
    show_summary
}

# 执行主函数
main